(function() {

    var instance = function(opts) {
        this.configurationSettings = opts;
    };

    instance.prototype.getConfigurationSettings = function() {
        return this.configurationSettings;
    }

    instance.prototype.grep = function( elems, callback, inv ) {
        var ret = [], retVal;
        inv = !!inv;

        for ( var i = 0, length = elems.length; i < length; i++ ) {
            retVal = !!callback( elems[ i ], i );
            if ( inv !== retVal ) {
                ret.push( elems[ i ] );
            }
        }

        return ret;
    }

    instance.prototype.grepRiverQueue = function(name) {
        var grep_array = this.grep(this.configurationSettings.riverQueue, function( n, i ) {
            return n.name === name;
        });

        var river_config;
        for (var cfg in grep_array) {
            river_config = grep_array[cfg];
            break;
        }

        return river_config;
    }
    instance.prototype.getRiverSettings = function(name) {
        var river = {};
        var cfg = this.grepRiverQueue(name);

        if (cfg) {
            river = {
                "type" : "jdbc",
                "jdbc" : {
                    "strategy" : "oneshot",
                    "scale" : 0,
                    "autocommit" : false,
                    "fetchsize" : 10,
                    "max_rows" : 0,
                    "max_retries" : 3,
                    "max_retries_wait" : "10s",
                    "driver" : "com.mysql.jdbc.Driver",
                    "url": cfg.url,
                    "user": cfg.user,
                    "password": cfg.password,
                    "sql" : cfg.sql
                },
                "index" : {
                    "index" : cfg.index,
                    "type" : cfg.type,
                    "bulk_size" : cfg.bulkSize,
                    "max_bulk_requests" : cfg.maxBulkRequests,
                    "index_settings" : null,
                    "type_mapping" : null,
                    "versioning" : false,
                    "acknowledge" : false
                }
            };
        }
        return river;
    }

    instance.prototype.createRiver = function(name, cfg, client, logger) {
        console.log('creating river: ' + name);

        client.createOrModifyRiver(name, cfg)
            .on('data', function(data) {
                var jsonObject = JSON.parse(data);
                if (jsonObject.ok != true) {
                    logger.log('error', 'on-data', jsonObject);
                    console.log('error: ' + JSON.stringify(jsonObject));
                }
            })
            .on('error', function(error) {
                logger.log('error', 'on-error', error);
                console.log('error: ' + JSON.stringify(error));
            })
            .exec();

        if (cfg.verification_records_threshold && cfg.verification_records_threshold > 0){
            try {
                console.log('river validation requested...');

                var waitForRiverImport = setTimeout(function(cfg, silent) {
                    console.log('verifying river...');

                    client.search(cfg.index, cfg.type, { "query" : { "match_all" : {}}})
                        .on('data', function(data) {
                            var jsonObject = JSON.parse(data);
                            if (jsonObject.hits.total < cfg.verification_records_threshold) {
                                fail = true;
                                logger.log('error', 'validate-river', { "totalExpected" : cfg.verification_records_threshold, "totalFound" : jsonObject.hits.total });
                                return;
                            }
                        })
                        .on('error', function(error){
                            fail = true
                            logger.log('error', 'on-error', error);
                            return;
                        })
                        .exec()
                }, cfg.verification_wait_ms);
            } catch(e) {
                // validation failed or unsupported, continue
                console.log(e);
            }
        }

       return;
    }

    instance.prototype.deleteRiver = function(name, cfg, client, logger, cb){
        console.log('deleting river: ' + name);
        client.deleteRiver(name, cfg, cb)
            .on('data', function(data) {
                var jsonObject = JSON.parse(data);
                if (jsonObject.ok != true) {
                    logger.log('error', 'on-data', jsonObject);
                    console.log('error: ' + JSON.stringify(jsonObject));
                }
            })
            .on('error', function(error) {
                logger.log('error', 'on-error', error);
                console.log('error: ' + JSON.stringify(error));
            })
            .exec();
    }

    exports.instance = instance;
})();